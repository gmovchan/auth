>>950201

Раз у тебя есть папка public, надо бы в нее перенести index.php и сделать ее корневой папкой веб-сервера, а то у тебя весь код наружу выставлен получается.

https://github.com/grigoryMovchan/auth/blob/auth_mvc/db.sql#L25
> ENGINE=MyISAM 
Прочитай в интернете различия между движками MyISAM и InnoDB, особенно про поддержку внешних ключей и транзакций

nbproject возможно стоит внести в gitignore целиком. Это же конфиги конкретной IDE, а не часть проекта.

https://github.com/grigoryMovchan/auth/blob/auth_mvc/index.php
> require 'app/bootstrap.php';

Идея bootstrap-файла в том, что он инициализирует приложение, а не запускает разбор запроса. Он нужен на тот случай, когда у тебя несколько точек входа в приложение, например cli-скрипты. И не хочется копипастить один и тот же код в начало каждого из них.

В твоем варианте bootstrap тут никак не помогает и вообще его правильнее было бы назвать index.php, а не bootstrap.php. 

https://github.com/grigoryMovchan/auth/blob/auth_mvc/app/models/AuthModel.php
тут все смешано в кучу, все компоненты MVC в одном классе. Да и даже если рассматривать одну функцию, там все перемешано, потому что ты не смог разделить стену кода на отдельные действия-функции.

Идея ООП в том, что у нас каждый компонент отвечает за свою часть задачи. Один класс, который умеет соединяться с БД и выполнять запросы, другой класс, который умеет искать пользователей в базе, третий класс, который умеет еще что-нибудь. 

Ну и название - "модель" тоже очень неудачное. Что такое модель, в твоем понимании? 

https://github.com/grigoryMovchan/auth/blob/auth_mvc/app/core/Model.php
Тут все неправильно с начала и до конца. 

Ну например у тебя в каждом объекте-модели свой объект PDO в то время как правильнее создать один объект и совместно его использовать. 

Далее, у тебя смешано много задач. У тебя базовый клсс модели занимается: 

- чтением конфигов
- установкой соединения с БД
- выполнением SQL запросов

https://github.com/grigoryMovchan/auth/blob/auth_mvc/app/core/Model.php#L69
> } catch (PDOException $e) {
> //TODO: убрать при переносе на сервер, строка только для отладки
> echo '<p>' . $query . '</p>';
Ты собрался catch и echo ставить после любой функции, которая может выкинуть исключение? Это ведь будет почти каждая функция в программе. И зачем ты выводишь сообщения? Какая польза посетителю твоего сайта от непонятных сообщений на английском? 

Вообще, PHP по умолчанию сам выводит на экран сообщение при выбрасывнии исключеия. Ты зачем-то пытаешься повторить то, что PHP и так умеет делать по умолчанию (если включено отображение ошибок). 

Тебе надо разобраться с исключениями. 

https://github.com/grigoryMovchan/auth/blob/auth_mvc/app/core/Model.php#L43
> switch ($type) {
Свитч сделан не очень правильно. Если передать в качестве type неправильное значение (например, из-за опечатки), то твой код притворятся что все в порядке, вместо того, чтобы сообщить тебе что ты передал неправильное значение. Так ошибку в коде придется искать намного дольше.

Вообще, это плохая идея сделать одну функцию с вариантами выбора. Надо тогда делать N функций, на каждый вариант свою.

https://github.com/grigoryMovchan/auth/blob/auth_mvc/views/auth/authForm.php
В шаблонах лучше использовать версии операторов с двоеточием, а не фигурными скобками.

> if (isset($error)) {
Это плохой подход. Если у тебя переменная может быть, а может не быть, то очень неудобно писать код.

https://github.com/grigoryMovchan/auth/blob/auth_mvc/views/auth/authForm.php#L12
> @$_POST['login']
@ неправильно тут использовать (и вообще неправильно использовать). Оно подавляет вообще любые ошибки, например, если ты опечатаешься в названии $_POST. 

Также, тут XSS.

Также, view не должен лезть в POST-данные. Это из-за того, что ты пока не научился разделять код на отдельные независимые действия. Должно быть так: 

- получить данные из POST
- сделать с ними что-ниудь
- проверить их
- ...
- вывести форму

А у тебя это смешано. Когда код разбит на отдельные действия, в нем легче разбираться, его легче править. А твой запутанный код очень тяжело поддерживать, так как изменение в одном месте ломает что-нибудь в другом. 

Тебе бы стоило сделать задачу на Вектор, если ты ее не делал. Она в том числе пытается научить этому разделению на части.
